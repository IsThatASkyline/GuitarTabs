from aiogram import F
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import (
    Button,
    Cancel,
    ScrollingGroup,
    Select,
    Start,
    SwitchTo,
)
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format, Jinja

from guitar_app.presentation.tgbot import states
from guitar_app.presentation.tgbot.dialogs.song_manage.founded_songs.getters import (
    get_songs_founded_by_title,
)
from guitar_app.presentation.tgbot.dialogs.song_manage.founded_songs.handlers import (
    find_song_by_title,
    select_founded_song_tab,
    select_song_founded_by_title,
)
from guitar_app.presentation.tgbot.dialogs.song_manage.getters import (
    get_all_tabs,
    get_chords,
    get_detail_tab,
    get_song,
)
from guitar_app.presentation.tgbot.dialogs.song_manage.handlers import (
    add_song_to_favorite,
    refresh_mod_value,
    remove_song_from_favorite,
)
from guitar_app.presentation.tgbot.jinja.templates import menu, templates

songs_founded_by_title = Dialog(
    Window(
        Jinja("üîç–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏"),
        MessageInput(func=find_song_by_title),
        Start(Const("üîô–ù–∞–∑–∞–¥"), id="back", state=states.MainMenuSG.main),
        state=states.FoundedSongsPanelSG.input_song_title,
    ),
    Window(
        Jinja(
            "{% if songs %}"
            "–ü–µ—Å–Ω–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: <b>{{ song_title }}</b> (–í—Å–µ–≥–æ: <b>{{ songs|length }}</b>)"
            "{% else %}"
            "–ü–µ—Å–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{{ song_title }}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            "{% endif %}"
        ),
        ScrollingGroup(
            Select(
                Format("{item.title}"),
                id="founded_songs",
                item_id_getter=lambda x: x.id,
                items="songs",
                on_click=select_song_founded_by_title,
            ),
            id="founded_songs_sg",
            width=1,
            height=7,
            when=F["songs"],
        ),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        state=states.FoundedSongsPanelSG.choose_song,
        getter=get_songs_founded_by_title,
    ),
    Window(
        templates.SONG_MENU,
        Button(
            Const("‚≠êÔ∏è–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"),
            id="add_to_favorite",
            on_click=add_song_to_favorite,
            when=~F["in_favorites"],
        ),
        Button(
            Const("üóë–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"),
            id="remove_from_favorite",
            on_click=remove_song_from_favorite,
            when=F["in_favorites"],
        ),
        SwitchTo(
            Const("üìñ –¢–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã"),
            id="to_chords",
            state=states.FoundedSongsPanelSG.song_chords,
        ),
        SwitchTo(
            Const("üîô–ù–∞–∑–∞–¥ –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–µ—Å–Ω—è–º"),
            id="to_all_songs",
            state=states.FoundedSongsPanelSG.choose_song,
        ),
        state=states.FoundedSongsPanelSG.song_menu,
        getter=get_song,
    ),
    Window(
        templates.SONG_CHORDS_WITHOUT_TABS_TEMPLATE,
        SwitchTo(
            Const("üéº–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±—ã"),
            id="to_tabs",
            state=states.FoundedSongsPanelSG.song_tabs,
            when=F["song"].tabs,
        ),
        menu.modulation_menu,
        SwitchTo(
            Const("üìú–ü–æ–∫–∞–∑–∞—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ç—É—Ä—ã –∞–∫–∫–æ—Ä–¥–æ–≤"),
            id="to_chords_tabs",
            state=states.FoundedSongsPanelSG.song_chords_with_tabs,
        ),
        SwitchTo(
            Const("üîô–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –ø–µ—Å–Ω–∏"),
            id="to_song",
            state=states.FoundedSongsPanelSG.song_menu,
            on_click=refresh_mod_value,
        ),
        state=states.FoundedSongsPanelSG.song_chords,
        getter=get_chords,
    ),
    Window(
        templates.SONG_CHORDS_WITH_TABS_TEMPLATE,
        SwitchTo(
            Const("üéº–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±—ã"),
            id="to_tabs",
            state=states.FoundedSongsPanelSG.song_tabs,
            when=F["song"].tabs,
        ),
        menu.modulation_menu,
        SwitchTo(
            Const("üìú–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∞–∫–∫–æ—Ä–¥—ã"),
            id="to_chords",
            state=states.FoundedSongsPanelSG.song_chords,
        ),
        SwitchTo(
            Const("üîô–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –ø–µ—Å–Ω–∏"),
            id="to_song",
            state=states.FoundedSongsPanelSG.song_menu,
            on_click=refresh_mod_value,
        ),
        state=states.FoundedSongsPanelSG.song_chords_with_tabs,
        getter=get_chords,
    ),
    Window(
        Jinja("–¢–∞–±—ã –∫ <b>{{ band_title }} - {{ song_title }}</b>"),
        ScrollingGroup(
            Select(
                Format("{item.title}"),
                id="founded_song_tabs",
                item_id_getter=lambda x: x.id,
                items="tabs",
                on_click=select_founded_song_tab,
            ),
            id="founded_songs_tabs_sg",
            width=1,
            height=7,
            when=F["tabs"],
        ),
        SwitchTo(
            Const("üîô–ù–∞–∑–∞–¥ –∫ –∞–∫–∫–æ—Ä–¥–∞–º"),
            id="to_song",
            state=states.FoundedSongsPanelSG.song_chords,
            on_click=refresh_mod_value,
        ),
        state=states.FoundedSongsPanelSG.song_tabs,
        getter=get_all_tabs,
    ),
    Window(
        Format("{title}"),
        DynamicMedia("tab"),
        SwitchTo(
            Const("üîô–ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º —Ç–∞–±–∞–º"),
            id="to_tabs",
            state=states.FoundedSongsPanelSG.song_tabs,
        ),
        state=states.FoundedSongsPanelSG.song_tab_detail,
        getter=get_detail_tab,
    ),
    Window(
        Const("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        state=states.FoundedSongsPanelSG.message_type_error,
    ),
)
